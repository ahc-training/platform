- name: Create namespaces
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: devops

- name: Create ClusterRole for Prometheus
  kubernetes.core.k8s:
    state: present
    namespace: default
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: prometheus
      rules:
      - apiGroups: [""]
        resources:
        - nodes
        - nodes/proxy
        - services
        - endpoints
        - pods
        verbs: ["get", "list", "watch"]
      - apiGroups:
        - extensions
        resources:
        - ingresses
        verbs: ["get", "list", "watch"]
      - nonResourceURLs: ["/metrics"]
        verbs: ["get"]

- name: Create ClusterRoleBinding for Prometheus
  kubernetes.core.k8s:
    state: present
    namespace: default
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: prometheus
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: prometheus
      subjects:
      - kind: ServiceAccount
        name: default
        namespace: devops

- name: Create ConfigMap for Prometheus
  kubernetes.core.k8s:
    state: present
    namespace: devops
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: prometheus-server-conf
        labels:
          name: prometheus-server-conf
        namespace: devops
      data:
        prometheus.rules: |-
          groups:
          - name: demo alert
            rules:
            - alert: High Pod Memory
              expr: sum(container_memory_usage_bytes) > 1
              for: 1m
              labels:
                severity: slack
              annotations:
                summary: High Memory Usage
        prometheus.yml: |-
          global:
            scrape_interval: 5s
            evaluation_interval: 5s
          rule_files:
            - /etc/prometheus/prometheus.rules
          alerting:
            alertmanagers:
            - scheme: http
              static_configs:
              - targets:
                - "alertmanager.devops.svc:9093"
          scrape_configs:
            - job_name: "Jenkins"
              metrics_path: /prometheus
              static_configs:
                - targets: ["jenkins.devops.svc:8080"]
            - job_name: "Prometheus"
              static_configs:
                - targets: ["localhost:9090"]
            - job_name: "airflow"
              static_configs:
                - targets: ["airflow-statsd.airflow.svc:9102"]
            - job_name: "kafka"
              static_configs:
                - targets: ["kafka-metrics.kafka.svc:9308"]
# - job_name: "kubernetes-metrics"
#   scheme: https
#   tls_config:
#     insecure_skip_verify: true
#   static_configs:
#     - targets: ["metrics-server.default.svc:443"]
# - job_name: "kubelet"
#   metrics_path: "/metrics/cadvisor"
#   scheme: https
#   honor_timestamps: true
#   bearer_token: "eyJhbGciOiJSUzI1NiIsImtpZCI6IkhvQzZvRFE2eFRTaW93d3lRSzN2YVRHODFMeElqSDNidEdnN1pXSXh5ejgifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6InByb20tYXBpLXVzZXItc2VjcmV0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6InByb20tYXBpLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiI0MWRlMWIxNC1jMmE2LTRlYmMtYjJiMy1lZDc1MzcxM2Q0NmIiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6ZGVmYXVsdDpwcm9tLWFwaS11c2VyIn0.m33IUIturQW7QzVaySk_7CMGsbW7lkHh_7yTSdhqeQsUdOkQUohb_uTNeB4uoJ20B3oQPnZuac_T6JsZYBxjO6NKoJMk2gWvxq5Xg1-LbCbxKdKZeF7pBnlB7dXEM2CcsNAo5MfslrF2b1GSgFipFFd0bFCj4ztBVA8b7uOhSM0rGjhVpRSPvNo8w1vl1-gpnvHXNM7Me_t4zNpX2Q0vLKFIZynC1emPMl_5wo6NQk7yj9CxHMNo9yNBVHJUikkLzKFZxbpKGsCM_UM7T-JhYTEKKbtO2kxXXocNBldS2tluyNsAobch1eUigaiGa8vmpbFRoNxBoaVmRpeKwzFKAA"
#   tls_config:
#     insecure_skip_verify: true
#   static_configs:
#     - targets: ["kubernetes.default.svc:443"]


- name: Create Deployment for Prometheus
  kubernetes.core.k8s:
    state: present
    namespace: devops
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: prometheus-deployment
        labels:
          app: prometheus-server
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: prometheus-server
        template:
          metadata:
            labels:
              app: prometheus-server
          spec:
            containers:
              - name: prometheus
                image: prom/prometheus
                args:
                  - "--config.file=/etc/prometheus/prometheus.yml"
                  - "--storage.tsdb.path=/prometheus/"
                ports:
                  - containerPort: 9090
                volumeMounts:
                  - name: prometheus-config-volume
                    mountPath: /etc/prometheus/prometheus.rules
                    subPath: prometheus.rules
                  - name: prometheus-config-volume
                    mountPath: /etc/prometheus/prometheus.yml
                    subPath: prometheus.yml
                  - name: prometheus-storage-volume
                    mountPath: /prometheus/
            volumes:
              - name: prometheus-config-volume
                configMap:
                  defaultMode: 420
                  name: prometheus-server-conf
                  items:
                    - key: prometheus.rules
                      path: prometheus.rules
                    - key: prometheus.yml
                      path: prometheus.yml
              - name: prometheus-storage-volume
                emptyDir: {}

- name: Create Service for Prometheus
  kubernetes.core.k8s:
    state: present
    namespace: devops
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: prometheus-service
        annotations:
          prometheus.io/scrape: 'true'
          prometheus.io/port:   '9090'
          lb.kubesphere.io/v1alpha1: openelb
          protocol.openelb.kubesphere.io/v1alpha1: layer2
          eip.openelb.kubesphere.io/v1alpha2: eip-k8s-pool
      spec:
        selector: 
          app: prometheus-server
        type: LoadBalancer  
        ports:
          - port: 8080
            targetPort: 9090 
            nodePort: 30000
        externalTrafficPolicy: Cluster

- name: Create ConfigMap for Grafana
  kubernetes.core.k8s:
    state: present
    namespace: devops
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: grafana-datasources
      data:
        prometheus.yaml: |-
          {
              "apiVersion": 1,
              "datasources": [
                  {
                    "access":"proxy",
                      "editable": true,
                      "name": "prometheus",
                      "orgId": 1,
                      "type": "prometheus",
                      "url": "http://prometheus-service.devops.svc:8080",
                      "version": 1
                  }
              ]
          }

- name: Create Deployment for Grafana
  kubernetes.core.k8s:
    state: present
    namespace: devops
    definition:
      apiVersion: apps/v1
      kind: StatefulSet
      metadata:
        name: grafana
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: grafana
        template:
          metadata:
            name: grafana
            labels:
              app: grafana
          spec:
            containers:
            - name: grafana
              image: grafana/grafana:5.0.0
              ports:
              - name: grafana
                containerPort: 3000
              resources:
                limits:
                  memory: "1Gi"
                  cpu: "1000m"
                requests: 
                  memory: 500M
                  cpu: "500m"
              volumeMounts:
                - mountPath: /var/lib/grafana
                  name: grafana-volume-claim
                - mountPath: /etc/grafana/provisioning/datasources
                  name: grafana-datasources
                  readOnly: false
            volumes:
              - name: grafana-datasources
                configMap:
                    defaultMode: 420
                    name: grafana-datasources
        volumeClaimTemplates:
          - metadata:
              name: grafana-volume-claim
            spec:
              accessModes:
                - ReadWriteOnce
              volumeMode: Filesystem
              resources:
                requests:
                  storage: 2Gi
              storageClassName: "cstor-csi-disk"

- name: Create Service for Grafana
  kubernetes.core.k8s:
    state: present
    namespace: devops
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: grafana
        annotations:
          prometheus.io/scrape: 'true'
          prometheus.io/port:   '3000'
          lb.kubesphere.io/v1alpha1: openelb
          protocol.openelb.kubesphere.io/v1alpha1: layer2
          eip.openelb.kubesphere.io/v1alpha2: eip-k8s-pool
      spec:
        selector: 
          app: grafana
        type: LoadBalancer  
        ports:
          - port: 3000
            targetPort: 3000
        externalTrafficPolicy: Cluster
